<!DOCTYPE html>
<html lang="{{page_lang}}">
	<head>
		<title>{{lang album.metaTitleLangId}}</title>
		<meta name="description" content="{{lang album.metaDescLangId}}">
		<meta name="og:image" content="{{origin}}{{album.coverUrl}}">
		{{>common_head_tags}}
		<script src="main.js" defer></script>
		<style>
			{{{css.fonts}}}
		</style>
		<style>
			{{{css.main}}}
		</style>
		<style>
			body {
				height: 100%;
				display: flex;
				flex-direction: column;
				align-items: stretch;
				font-size: 16px;
				margin: 0;
				color: var(--text-color);
				background-color: var(--background-color);
			}

			#content {
				display: flex;
				flex-direction: column;
				justify-content: space-between;
			}

			#album-info {
				display: grid;
				grid-template-columns: auto auto;
				grid-template-rows: 400px 50px auto;
				justify-content: flex-start;
				row-gap: 10px;
			}

			#tracklist {
				display: grid;
				grid-template-columns: auto auto;
				grid-row: span 3;
			}

			#tracklist ol {
				margin-top: 0;
			}

			#tracklist li {
				list-style-type: none;
			}

			#tracklist li:nth-child(n+2) {
				margin-top: 1em;
			}

			#main-cover {
				width: 400px;
				aspect-ratio: 1;
				max-width: calc(100vw - 100px);
				background: gray;
				top: 20px;
				z-index: 10;
				transform-origin: top;
			}
			#scroll-header {
				background: black;
				position: fixed;
				inset: 0;
				height: 110px;
				display: flex;
				justify-content: center;
				padding-top: 20px;
				z-index: 9;
				background-color: var(--color-frosted-background);
    			-webkit-backdrop-filter: blur(30px);
    			backdrop-filter: blur(30px);
			}
			#main-cover-stuck {
				width: 400px;
				height: 400px;
				background: gray;
				top: 20px;
				z-index: 9;
				transform-origin: top;
				transform: scale(.2);
			}
			@media screen and (max-width: 900px) {
				#main-cover {
					position: sticky;
				}
			}
			.track-title {
				display: flex;
				align-items: center;
				gap: 4px;
			}
			.track-title-playing-icon {
				opacity: 0;
				height: 16px;
				width: 16px;
				background-size: 9px;
				background-image: url(/images/playing-track.svg);
				background-repeat: no-repeat;
				background-position: center;
				transition: opacity .3s var(--easing-normal);
			}
			.playing .track-title-playing-icon {
				opacity: 1;
			}
			.track-title-text {
				transform: translateX(-21px);
				transition: all .3s var(--easing-normal);
				cursor: pointer;
			}
			.playing .track-title-text {
				transform: translateX(0);
				color: var(--color-brand);
			}
			.track-personnel {
				color: var(--text-color-secondary);
				font-size: 80%;
				margin-top: .3em;
				line-height: 1.5em;
			}
			.personnel-credit {
				white-space: nowrap;
			}
			.personnel-name {
				font-weight: bold;
				color: var(--text-color);
			}
			#playback-controls {
				grid-column: 1;
				display: grid;
				grid-template-columns: min-content auto;
				grid-template-rows: auto auto;
				align-items: flex-end;
				font-size: 85%;
				user-select: none;
				-webkit-user-select: none;
				cursor: default;
			}
			#buy-options {
				margin-top: 4em;
				display: grid;
				grid-template-columns: repeat(auto-fill, calc(50% - 20px));
				gap: 40px;
				margin-bottom: 40px;
			}
			#buy-options-title {
				grid-row: 1;
				grid-column: 1 / -1;
				justify-self: center;
			}
			@media screen and (max-width: 520px) {
				#buy-options-title {
					justify-self: stretch;
					margin-right: 34px;
					text-align: center;
				}
			}
			.buy-button {
				cursor: pointer;
				background-color: var(--color-brand);
				font-family: inherit;
				border: none;
				border-radius: 5px;
				font-size: 100%;
				padding: 0.4em 0.7em;
				font-weight: bold;
				max-width: 200px;
				white-space: nowrap;
			}
			.buy-button:hover {
				background-color: var(--color-brand-hover);
			}
			#buy-option-art {
				background: gray;
				grid-row: 1 / span 3;
				aspect-ratio: 1;
				width: 100%
			}
			.buy-option-item {
				display: grid;
				grid-template-columns: 150px min-content auto;
				grid-template-rows: 1.5em auto 1fr;
				column-gap: 10px;
				row-gap: .2em;
			}
			.buy-option-item form {
				margin: 0;
				align-self: center;
			}
			.buy-option-title {
				font-weight: bold;
				grid-column: 2 / span 2;
			}
			.buy-option-desc {
				font-weight: 300;
				font-size: 90%;
				line-height: 1.3em;
				grid-column: 2 / span 2;
				margin-bottom: .4em;
			}
			@media screen and (max-width: 520px) {
				#buy-options {
					padding-left: 34px;
				}
				.buy-option-item {
					grid-template-columns: min-content auto;
				}
				#buy-option-art {
					display: none;
				}
				.buy-option-title {
					grid-column: 1 / span 2;
				}
				.buy-option-desc {
					grid-column: 1 / span 2;
				}
			}
			.sample-play-button {
				background-image: url(/images/play.svg);
				background-repeat: no-repeat;
				background-position: center;
				background-size: 20px;
				border: none;
				background-color: transparent;
				height: 30px;
				width: 30px;
				cursor: pointer;
				grid-row: span 2;
			}
			#play-button {
				height: 50px;
				width: 50px;
				border-radius: 25px;
				background-image: url(/images/play.svg);
				background-repeat: no-repeat;
				background-position: center;
				background-size: 20px;
				border: none;
				background-color: transparent;
				cursor: pointer;
				grid-row: span 2;
				filter: brightness(.1);
			}

			@media (prefers-color-scheme: dark) {
				#play-button {
					filter: none;
				}
			}

			#track-progress {
				cursor: pointer;
				width: 100%;
			}

			#playback-track-title {
				color: var(--text-color-secondary);
			}

			#playback-track-title.song-loaded {
				color: var(--text-color);
			}

			.tracklist-item {
				display: grid;
				column-gap: 10px;
				grid-template-columns: 24px auto;
				grid-template-rows: auto auto;
			}

			.track-number {
				grid-column: 1;
				grid-row: span 2;
				text-align: right;
			}

			.track-number::before {
				content: counter(list-item) ".";
			}

			.click-text::before {
				content: '{{lang.global_touch}}';
			}

			@media (pointer: fine) {
				.click-text::before {
					content: '{{lang.global_click}}';
				}
			}

			.click-text.capital::before {
				text-transform: capitalize;
			}

			@media screen and (max-width: 900px) {
				#album-info {
					grid-template-columns: auto;
					grid-template-rows: auto auto auto auto;
					justify-items: center;
					row-gap: 10px;
				}

				#album-info ol {
					padding: 0;
				}

				#buy-options {
					grid-row: 2;
					grid-template-columns: auto;
				}

				#playback-controls {
					grid-row: 3;
					position: relative;
    				left: -25px;
					margin-bottom: 20px;
					margin-top: 10px;
				}

				#track-progress {
					width: calc(100vw - 170px);
				}
			}

			#additional-buy-options {
				margin: 4em 0;
				text-align: center;
				line-height: 1.4;
			}

			#additional-buy-options a {
				font-weight: bold;
			}

			#purchase-success-dialog {
				max-width: 800px;
				line-height: 1.4em;
				border: none;
			}
			#purchase-success-dialog p {
				margin-top: 0;
				margin-bottom: .5em;
			}
			#purchase-success-close {
				position: absolute;
				top: 0;
				right: 0;
				background-image: url(/images/close.svg);
				background-position: center;
				background-repeat: no-repeat;
				background-color: transparent;
				border: none;
				height: 40px;
				width: 40px;
				background-size: 14px;
				cursor: pointer;
			}
			#purchase-success-close:focus {
				outline: none;
			}
		</style>
	</head>
	<body>
		<dialog id="purchase-success-dialog">
			{{{lang.global_purchase_success}}}
			<button id="purchase-success-close"></button>
		</dialog>
		{{>navbar}}
		<div id="content">
			<h1 id="page-title">{{lang album.titleLangId}}</h1>
			<div id="album-info">
				<img id="main-cover" src="{{album.coverUrl}}">
				<div id="scroll-header" style="display: none">
					<img id="main-cover-stuck" src="{{album.coverUrl}}">
				</div>
				<div id="tracklist">
					<ol>
						{{#each album.tracks}}
							<li>
								<div class="tracklist-item">
									<div class="track-number"></div>
									<div class="track-title"><div class="track-title-playing-icon white-icon"></div><span class="track-title-text">{{lang this.titleLangId}}</span></div>
									<div class="track-personnel">
										{{#each this.personnel}}
											<span class="personnel-credit">{{lang this.roleLangId}}<span class="personnel-name">{{lang this.playerLangId}}</span></span>,
										{{/each}}
									</div>
								</div>
							</li>
						{{/each}}
					</ol>
				</div>
				<div id="playback-controls">
					<button id="play-button" type="button"></button>
					<div id="playback-track-title">{{{lang.global_miniplayer_instructions}}}</div>
					<div>
						<progress id="track-progress" value="0"></progress>
					</div>
				</div>
			</div>
			<div id="buy-options">
				<h2 id="buy-options-title">{{{lang.global_buy_options_title}}}</h2>
				{{#each album.products}}
					<div class="buy-option-item">
						<img id="buy-option-art" src="{{@root.album.coverUrl}}"></img>
						<div class="buy-option-title">{{{lang this.titleLangId}}} - ${{this.price}}</div>
						<div class="buy-option-desc">{{{lang this.descLangId}}}</div>
						<form action="{{api_root}}/create-checkout-session?productId={{this.id}}" method="POST">
							<button type="submit" class="buy-button">{{{@root.lang.global_buy_now}}}</button>
						</form>
					</div>
				{{/each}}
			</div>
			<div id="additional-buy-options">
				{{{evalAsTemplate lang.global_available_on album}}}
			</div>
		</div>
		{{>footer}}
		{{>mailinglist_dialog}}
		<script>

			document.body.onscroll = evt => onPageScroll(evt);

			const trackList = [
			{{#each album.tracks}}
				{ title: "{{lang this.titleLangId}}", url: "{{this.sampleMp3Url}}" },
			{{/each}}
			];
			let currentTrackIndex = null;

			const audio = new Audio();
			const playButton = document.getElementById("play-button");
			const trackTitleText = document.getElementById("playback-track-title");
			const progressBar = document.getElementById("track-progress");
			progressBar.onclick = evt => onProgressBarClick(evt);

			[...document.querySelectorAll(".track-title-text")].forEach((span, index) => span.onclick = () => playTrack(index));

			playButton.onclick = () => {
				if (currentTrackIndex == null)
				{
					currentTrackIndex = 0;
					playTrack(currentTrackIndex);
				}
				else if (audio.paused)
				{
					audio.play();
					playButton.style.backgroundImage = `url(/images/pause.svg)`;
					indicateTrackPlaying(currentTrackIndex);
				}
				else
				{
					audio.pause();
					playButton.style.backgroundImage = `url(/images/play.svg)`;
					indicateNoTrackPlaying();
				}
				
			};

			function onTimeUpdate()
			{
				if (isNaN(audio.duration))
					progressBar.value = 0;
				else
				{
					const percentComplete = audio.currentTime / audio.duration;
					progressBar.value = percentComplete;
				}
			}

			function onProgressBarClick(evt)
			{
				if (currentTrackIndex == null || audio.paused)
					return;
				
				const barRect = progressBar.getBoundingClientRect();
				const percentage = (evt.clientX - barRect.left) / barRect.width;

				if (audio.fastSeek)
					audio.fastSeek(percentage * audio.duration);
				else
					audio.currentTime = percentage * audio.duration;
			}

			function playTrack(index)
			{
				progressBar.value = 0;
				audio.src = trackList[index].url;
				audio.ontimeupdate = () => onTimeUpdate();
				audio.onended = () => {
					if (index < trackList.length - 1)
						playTrack(index + 1);
					else
					{
						indicateNoTrackPlaying();
						trackTitleText.classList.remove("song-loaded");
						trackTitleText.innerHTML = "{{{lang.global_miniplayer_instructions}}}";
						playButton.style.backgroundImage = `url(/images/play.svg)`;
						progressBar.value = 0;
						currentTrackIndex = null;
					}
				}
				audio.play();
				trackTitleText.textContent = trackList[index].title;
				playButton.style.backgroundImage = `url(/images/pause.svg)`;
				trackTitleText.classList.add("song-loaded");
				
				indicateTrackPlaying(index);
				currentTrackIndex = index;
			}

			function indicateTrackPlaying(index)
			{
				indicateNoTrackPlaying();

				const tracklistItem = document.querySelector(`li:nth-child(${index + 1})`);
				tracklistItem.classList.add("playing");
			}

			function indicateNoTrackPlaying()
			{
				const currentItem = document.querySelector("li.playing");
				currentItem?.classList.remove("playing");
			}

			const purchaseSuccessDialog = document.getElementById("purchase-success-dialog");
			const purchaseSuccessCloseButton = document.getElementById("purchase-success-close");
			purchaseSuccessCloseButton.onclick = () => purchaseSuccessDialog.close();

			const urlSearchParams = new URLSearchParams(window.location.search);
			if (urlSearchParams.get("purchaseSuccess") != null)
			{
				purchaseSuccessDialog.showModal();
				purchaseSuccessDialog.onmousedown = (evt) => {
				const dialogRect = purchaseSuccessDialog.getBoundingClientRect();
					if (evt.clientY < dialogRect.top || evt.clientY > dialogRect.bottom || evt.clientX < dialogRect.left || evt.clientX > dialogRect.right)
						purchaseSuccessDialog.close();
				};
			}

			const scrollHeader = document.getElementById("scroll-header");
			const albumCover = document.getElementById("main-cover");
			const stuckAlbumCover = document.getElementById("main-cover-stuck");

			function onPageScroll(evt)
			{
				const originalSize = albumCover.offsetWidth;
				const targetSize = 80;
				const scrollTop = document.scrollingElement.scrollTop;
				const scrollWait = 163;
				const scaleEnd = 350;
				const minScale = targetSize / originalSize;
				const singleColumnScreenWidth = 920;
				const windowWidth = window.innerWidth;

				const imgScale = Math.max(minScale, 1 - Math.min(1, Math.max(0, (scrollTop - scrollWait)) / scaleEnd));

				if (windowWidth <= singleColumnScreenWidth)
					albumCover.style.transform = `scale(${imgScale})`;
				else
					albumCover.style.transform = "";

				const scrollHeaderStartFade = minScale + (1 - minScale) / 10;
				const scrollHeaderEndFade = minScale;

				if (imgScale <= scrollHeaderStartFade && windowWidth <= singleColumnScreenWidth)
				{
					scrollHeader.style.display = "";
					scrollHeader.style.opacity = (scrollHeaderStartFade - imgScale) / (scrollHeaderStartFade - scrollHeaderEndFade) + "";
				}
				else
				{
					scrollHeader.style.display = "none";
					scrollHeader.style.opacity = "";
				}

				if (imgScale === minScale && windowWidth <= singleColumnScreenWidth)
				{
					stuckAlbumCover.style.display = "";
					albumCover.style.opacity = "0";
				}
				else
				{
					stuckAlbumCover.style.display = "none";
					albumCover.style.opacity = "";
				}
			}
		</script>
	</body>
</html>